package com.ohgiraffers.section05.overloading;

public class OverloadingTest {

    // 오버로딩
    // 동일한 이름의 생성자나 메소드를 여러개 작성 할 수 있게
    // -> 같은 이름의 메소드여도 매개변수 부분의 타입, 갯수,
    // 순서를 다르게 작성하면 서로다른 메소드나 생성자로 인식한다.
    // 같은 이름으로 여러 메소드를 만드는 것을 오버로딩이라고 한다.

    /*
    * 오버로딩의 사용 이유
    *
    * 매개변수의 종류별로 메소드 내용을 다르게 작성해야 하는 경우가 종종 있다.
    * 이 때, 동일한 기능의 메소드를 매개변수에 따라 다르게 이름을 정의하면 복잡하고 관리하기 어려움
    * 규모가 작은 프로그램의 경우 정도가 덜 하지만, 규모가 거대해지면 메소드 또한 관리하기 어려워짐
    * 따라서 동일한 이름으로 다양한 종류의 매개변수에 따라 처리해야 하는 여러 메소드를
    * 동일한 이름으로 관리하기 위해 사용한다.
    * */

    /*
    * 오버로딩의 조건
    * 동일한 이름을 가진 메소드의 파라미터 선언부에 매개변수의 타입, 갯수, 순서를 다르게 작성하여
    * 한 클래스 내에 동일한 이름의 메소드를 여러 개 작성 할 수 있도록 한다.
    * 메소드의 시그니처(Signature)가 다르면 다른 메소드로 인식하기 때문이다.
    * 즉, 시그니쳐 중 메소드 이름은 동일해야 하기 때문에 파라미터 선언부가 다르게 작성되어야 오버로딩이 성립됨.
    * */

    /*
    * 메소드의 시그니쳐
    *
    * public void method(int num) {}
    * 메소드의 메소드 명과 파라미터 선언부 부분을 시그니쳐라고 한다.
    * method(int num) 이부분이 시그니쳐이다.
    * 메소드의 시그니쳐가 달라야 하기 때문에 접근제한자나 반환형은 오버로딩 성립 요건에 해당하지 않음.
    * */

    // 기준
    public void test() {}

    // 메소드의 시그니쳐가 동일한 경우 Compile Error를 발생시킨다.
    //public void test() {}

    // 접근제한자에 따른 오버로딩 성립 확인
    //private void test() {} // 접근제한자는 메소드 시그니쳐에 해당하지 않음

    //반환형에 따른 오버로딩 성립 확인
//    public void test() {
//        return 0;
//    } // 반환형도 메소드 시그니쳐에 해당하지 않음.

    // 매개변수 유무에 따른 오버로딩 성립 확인
    public void test(int num) {} // 파라미터(매개변수) 선언부는 메소드 시그니쳐에 해당하기에 오버로딩 성립

    // 매개변수 갯수에 따른 오버로딩 성립 확인
    public void test(int num, int num2) {} // 매개변수의 갯수에 따라 오버로딩 성립

    // 매개변수 변수명에 따른 오버로딩 성립 확인
    //public void test(int num2) {} // 매개변수 변수명은 메소드 시그니쳐에 해당하지 않음.

    // 매개변수 타입 변화에 따른 오버로딩 확인
    public void test(int num, String str) {} // 매개변수의 타입에 따라 오버로딩 성립

    // 매개변수의 순서에 따라 오버로딩 성립 확인
    public void test(String str, int num) {} // 매개변수의 순서에 따라 오버로딩 성립


}
